{
    "title": "TheBrain2level.js",
    "text": "const Categories = [\n  {\n    name: 'Focusing',\n  },\n  {\n    name: 'History',\n  },\n  {\n    name: 'Link To',\n  },\n  {\n    name: 'Backlink From',\n  },\n  {\n    name: 'Tag To',\n  },\n  {\n    name: 'Tag By',\n  },\n  {\n    name: 'Parent',\n  },\n];\n\nexports.onMount = function (echart) {\n  var state = {\n    historyTiddlers: [],\n  };\n  echart.on('click', function (event) {\n    if (event.dataType === 'node') {\n      new $tw.Story().navigateTiddler(event.data.name);\n    } else if (event.dataType === 'edge') {\n    }\n  });\n  return state;\n};\n\nexports.shouldUpdate = function (_, changedTiddlers) {\n  return $tw.utils.count(changedTiddlers) > 0;\n};\n\nexports.onUpdate = function (echart, state) {\n  var focussedTiddler = $tw.wiki.getTiddlerText('$:/temp/focussedTiddler');\n  if (focussedTiddler && focussedTiddler.startsWith('$:/')) return;\n  var nodes = [];\n  var edges = [];\n  if (focussedTiddler && focussedTiddler !== '') {\n    var nodeMap = {};\n    nodeMap[''] = true;\n\n    // 当前关注的 Tiddler\n    nodeMap[focussedTiddler] = true;\n    nodes.push({\n      name: focussedTiddler,\n      // fixed: true,\n      category: 0,\n    });\n\n    // 历史路径\n    var nextTiddler = focussedTiddler;\n    var historyMap = {};\n    for (var i = state.historyTiddlers.length - 2; i >= 0; i--) {\n      var tiddlerTitle = state.historyTiddlers[i];\n      if (historyMap[tiddlerTitle]) continue;\n      if (tiddlerTitle === nextTiddler) continue;\n      if (tiddlerTitle.startsWith('$:/')) continue;\n      edges.push({\n        source: tiddlerTitle,\n        target: nextTiddler,\n        label: {\n          show: true,\n          formatter: 'history',\n        },\n      });\n      historyMap[tiddlerTitle] = true;\n      nextTiddler = tiddlerTitle;\n      if (nodeMap[tiddlerTitle]) break;\n      nodes.push({\n        name: tiddlerTitle,\n        category: 1,\n      });\n      nodeMap[tiddlerTitle] = true;\n    }\n\n    // 链接\n    $tw.utils.each($tw.wiki.getTiddlerLinks(focussedTiddler), function (tiddlerTitle) {\n      edges.push({\n        source: focussedTiddler,\n        target: tiddlerTitle,\n        label: {\n          show: true,\n          formatter: 'link',\n        },\n      });\n      if (nodeMap[tiddlerTitle]) return;\n      nodes.push({\n        name: tiddlerTitle,\n        category: 2,\n      });\n      nodeMap[tiddlerTitle] = true;\n    });\n\n    // 反链\n    function pushBackLink(tiddlerTitle, target, stopRecursive) {\n      edges.push({\n        source: tiddlerTitle,\n        target,\n        label: {\n          show: true,\n          formatter: 'backlink',\n        },\n      });\n      if (nodeMap[tiddlerTitle]) return;\n      nodes.push({\n        name: tiddlerTitle,\n        category: 3,\n      });\n      nodeMap[tiddlerTitle] = true;\n      if (stopRecursive === true) return;\n      $tw.utils.each($tw.wiki.getTiddlerLinks(tiddlerTitle), (tiddlerTitle2) => {\n        pushBackLink(tiddlerTitle2, tiddlerTitle, true);\n      });\n    }\n    $tw.utils.each($tw.wiki.getTiddlerBacklinks(focussedTiddler), (sourceTiddler) =>\n      pushBackLink(sourceTiddler, focussedTiddler)\n    );\n\n    // 指向哪些tag\n    function pushTag(tiddlerTitle, source, stopRecursive) {\n      if (!$tw.wiki.tiddlerExists(tiddlerTitle)) return;\n      edges.push({\n        source,\n        target: tiddlerTitle,\n        label: {\n          show: true,\n          formatter: 'tag',\n        },\n      });\n      if (nodeMap[tiddlerTitle]) return;\n      nodes.push({\n        name: tiddlerTitle,\n        category: 4,\n      });\n      nodeMap[tiddlerTitle] = true;\n      if (stopRecursive === true) return;\n      $tw.utils.each($tw.wiki.getTiddler(tiddlerTitle).fields.tags, (tiddlerTag2) => {\n        pushBackLink(tiddlerTag2, tiddlerTitle, true);\n      });\n    }\n    $tw.utils.each($tw.wiki.getTiddler(focussedTiddler).fields.tags, (tiddlerTag) =>\n      pushTag(tiddlerTag, focussedTiddler)\n    );\n\n    // 被谁作为 Tag\n    function pushBackTag(tiddlerTitle, target, stopRecursive) {\n      edges.push({\n        source: tiddlerTitle,\n        target,\n        label: {\n          show: true,\n          formatter: 'tag',\n        },\n      });\n      if (nodeMap[tiddlerTitle]) return;\n      nodes.push({\n        name: tiddlerTitle,\n        category: 5,\n      });\n      nodeMap[tiddlerTitle] = true;\n      if (stopRecursive === true) return;\n      $tw.utils.each($tw.wiki.getTiddlersWithTag(tiddlerTitle), (tiddlerTitle2) => {\n        pushBackTag(tiddlerTitle2, tiddlerTitle, true);\n      });\n    }\n    $tw.utils.each($tw.wiki.getTiddlersWithTag(focussedTiddler), (tiddlerTitle) => {\n      pushBackTag(tiddlerTitle, focussedTiddler);\n    });\n\n    // 父条目\n    var path = focussedTiddler.split('/');\n    if (path.length > 1) {\n      var parentTiddler = path.slice(0, -1).join('/');\n      $tw.utils.each([parentTiddler, parentTiddler + '/'], function (tiddlerTitle) {\n        edges.push({\n          source: tiddlerTitle,\n          target: focussedTiddler,\n          label: {\n            show: true,\n            formatter: 'parent',\n          },\n        });\n        if (nodeMap[tiddlerTitle]) return;\n        nodes.push({\n          name: tiddlerTitle,\n          category: 6,\n        });\n        nodeMap[tiddlerTitle] = true;\n      });\n    }\n  }\n  var index_ = state.historyTiddlers.indexOf(focussedTiddler);\n  if (index_ > -1) state.historyTiddlers.splice(index_, 1);\n  state.historyTiddlers.push(focussedTiddler);\n  state.historyTiddlers.slice(-10);\n  echart.setOption({\n    legend: [\n      {\n        data: Categories.map(function (a) {\n          return a.name;\n        }),\n      },\n    ],\n    title: {\n      text: 'The Brain View',\n      show: true,\n      top: 'bottom',\n      left: 'right',\n    },\n    series: [\n      {\n        name: 'The Brain View',\n        type: 'graph',\n        layout: 'force',\n        nodes: nodes,\n        edges: edges,\n        categories: Categories,\n        roam: true,\n        draggable: true,\n        zoom: 4.0,\n        label: {\n          position: 'right',\n          show: true,\n        },\n        force: {\n          repulsion: 50,\n        },\n        edgeSymbol: ['circle', 'arrow'],\n        edgeSymbolSize: [4, 10],\n        edgeLabel: {\n          fontSize: 5,\n        },\n        lineStyle: {\n          opacity: 0.9,\n          width: 2,\n          curveness: 0,\n        },\n      },\n    ],\n  });\n};",
    "created": "20221130141822992",
    "modified": "20221130141920380",
    "tags": "tiddlywiki插件",
    "type": "application/javascript",
    "revision": "0",
    "bag": "default"
}